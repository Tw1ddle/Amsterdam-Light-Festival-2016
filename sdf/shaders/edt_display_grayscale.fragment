// This code is in the public domain.

varying vec2 vUv;
varying float oneu;
varying float onev;

uniform sampler2D tDiffuse;
uniform float texw;
uniform float texh;
uniform float texLevels;
uniform float threshold;
uniform float distanceFactor;

// Helper functions to remap unsigned normalized floats [0.0, 1.0] coming from an integer texture to the range we need [-1, 1].
// The transformations are very specifically designed to map integer texel values exactly to pixel centers, and vice versa.
vec2 remap(vec2 floatdata)
{
	return floatdata * (texLevels - 1.0) / texLevels * 2.0 - 1.0;
}

void main()
{
	// Scale texcoords to range ([0, texw], [0, texh])
	vec2 uv = vUv * vec2(texw, texh);
	
	// Compute texel-local (u,v) coordinates for the four closest texels
	vec2 uv00 = floor(uv - vec2(0.5)); // Lower left corner of lower left texel
	vec2 uvlerp = uv - uv00 - vec2(0.5); // Texel-local lerp blends [0,1]
	
	// Center st00 on lower left texel and rescale to [0,1] for texture lookup
	vec2 st00 = (uv00 + vec2(0.5)) * vec2(oneu, onev);
	
	// Compute distance value from four closest 8-bit RGBA texels
	vec4 T00 = texture2D(tDiffuse, st00);
	vec4 T10 = texture2D(tDiffuse, st00 + vec2(oneu, 0.0));
	vec4 T01 = texture2D(tDiffuse, st00 + vec2(0.0, onev));
	vec4 T11 = texture2D(tDiffuse, st00 + vec2(oneu, onev));
	float D00 = length(remap(T00.rg)) + (T00.b - 0.5) / texw;
	float D10 = length(remap(T10.rg)) + (T10.b - 0.5) / texw;
	float D01 = length(remap(T01.rg)) + (T01.b - 0.5) / texw;
	float D11 = length(remap(T11.rg)) + (T11.b - 0.5) / texw;
	
	// Interpolate along v
	vec2 D0_1 = mix(vec2(D00, D10), vec2(D01, D11), uvlerp.y);
	
	// Interpolate along u
	float D = mix(D0_1.x, D0_1.y, uvlerp.x) * distanceFactor;
	
	// Final fragment color
	gl_FragColor = vec4(vec3(D), 1.0);
}