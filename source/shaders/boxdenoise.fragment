// Denoise shader.
// Smooths over grainy noise in dark images using an 9x9 box filter, weighted by color intensity, similar to a bilateral filter.

// Adapted for Amsterdam Light Festival concept work by Sam Twidale.
// Based on the implementation from glfx.js by Evan Wallace: https://github.com/evanw/glfx.js
// This code is MIT licensed.

varying vec2 vUv;

uniform sampler2D tDiffuse;
uniform vec2 resolution;
uniform float exponent;
uniform float direction;

void main() 
{
	vec4 center = texture2D(tDiffuse, vUv);
	vec4 color = vec4(0.0);
	float total = 0.0;
	
	if(direction == 0.0)
	{
		for (float i = -16.0; i <= 16.0; i += 1.0)
		{
			vec4 sample = texture2D(tDiffuse, vUv + vec2(i, 0.0) / resolution);
			float weight = 1.0 - abs(dot(sample.rgb - center.rgb, vec3(0.0625)));
			weight = pow(weight, exponent);
			color += sample * weight;
			total += weight;
		}
	}
	else if(direction != 0.0)
	{
		for (float i = -16.0; i <= 16.0; i += 1.0)
		{
			vec4 sample = texture2D(tDiffuse, vUv + vec2(0.0, i) / resolution);
			float weight = 1.0 - abs(dot(sample.rgb - center.rgb, vec3(0.0625)));
			weight = pow(weight, exponent);
			color += sample * weight;
			total += weight;
		}
	}
	
	gl_FragColor = color / total;
}